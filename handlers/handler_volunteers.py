from aiogram import Router, F, types
from aiogram.types import Message
from typing import Optional
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from keyboards import keyboards as kb
from config import values_bot

router_volunteer = Router()

class CbDataCompletedTask(CallbackData, prefix="id1"):
    answer: str
    id: Optional[int] = None
    user_perform: str

class CbDataWorkTask(CallbackData, prefix="id2"):
    action: str
    task_id: Optional[int] = None
    user_id: str
    task: str

class CbDataFreeTask(CallbackData, prefix="id3"):
    action: str
    task_id: Optional[int] = None
    user_id: str
    user_perform: str
    task: str

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏" –æ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–Ω—è—Ç—ã–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –∑–∞—è–≤–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –≤–æ–≤—Å–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ–µ
@router_volunteer.message(F.text == "–ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏")
async def v_accepted_tasks(message: types.Message):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "volunteer" and exist[6] == 1:
        list_tasks = await db.get_list_accepted_tasks_volunteer(message.from_user.id)
        if list_tasks:
            for item in list_tasks:
                user_adr = await db.get_user_adr(item[3])
                user_name = await db.get_user_name(item[3])
                user_number = await db.get_user_nunmber(item[3])
                kb_item = [
                    types.InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–∏–ª", callback_data=CbDataWorkTask(action='perform',
                                                                                             task=item[1],
                                                                                             user_id=str(item[3]),
                                                                                             task_id=int(item[0])).pack()),
                    types.InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=CbDataWorkTask(action='refuse',
                                                                                               task=item[1],
                                                                                               user_id=str(item[3]),
                                                                                               task_id=int(item[0])).pack())
                ]
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[kb_item])
                await message.answer(text=f"‚ÜòÔ∏è ‚Ññ {item[0]}. –ó–∞–¥–∞—á–∞: {item[1]}\n"
                                     f"üìã–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {item[2]}\n"
                                     f"‚è≥–°—Ä–æ—á–Ω–æ—Å—Ç—å: {values_bot.URGENCY_TASK[f'{item[4]}']}\n"
                                     f"üåç–ê–¥—Ä–µ—Å: {user_adr[0]}\n"
                                     f"üõèÔ∏è–ó–∞–∫–∞–∑—á–∏–∫: {user_name[0]} (—Ç. {user_number[0]})\n"
                                     f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {item[5]}\n"
                                     f"–í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: {item[6]}\n",
                                     reply_markup=keyboard)
        else:
            await message.answer("–ü—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")

# –ï—Å–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç "–í—ã–ø–æ–ª–Ω–∏–ª", —Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç",
# –∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å —ç—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –≥–¥–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
# –ï—Å–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–ª–∏–µ–Ω—Ç—É
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –æ—Ç –∑–∞–¥–∞—á–∏.
@router_volunteer.callback_query(CbDataWorkTask.filter())
async def button_press_work_task(call: types.CallbackQuery, callback_data: dict):
    action = callback_data.action
    task_id = callback_data.task_id
    user_id = callback_data.user_id
    task=await db.get_task_id(task_id)
    if action == "perform":
        state = await db.get_task_state(task_id=task_id)
        if state is not None and state[0]:
            kb_iteam = [
                InlineKeyboardButton(text="–î–∞", callback_data=CbDataCompletedTask(answer='yes',
                                                                                  id=int(task_id),
                                                                                  user_perform=str(call.from_user.id)).pack()),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data=CbDataCompletedTask(answer='no',
                                                                                   id=int(task_id),
                                                                                   user_perform=str(call.from_user.id)).pack())
            ]
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[kb_iteam])
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            await call.bot.send_message(user_id=user_id,
                                        text=f"‚ÜòÔ∏è ‚Ññ {task_id}. –ó–∞–¥–∞—á–∞: {task[0]}\n"
                                             f"üèÉüèª–í–æ–ª–æ–Ω—Ç–µ—Ä: {call.from_user.id}\n"
                                             f"–í–æ–ª–æ–Ω—Ç–µ—Ä —Å–¥–µ–ª–∞–ª –ø—Ä–æ—Å—å–±—É?",
                                        reply_markup=keyboard
                                        )
            await call.message.answer("–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        else:
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            await call.answer(text=f"–î–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)

    elif action == "refuse":
        state = await db.get_task_state(task_id=task_id)
        if state is not None and state[0]:
            await db.upd_state_task_v(task_id, column_name="date_task_work",state_task="create")
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            await call.answer(text=f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞—á–∏ ‚Ññ {task_id} - {task[0]}", show_alert=True)
        else:
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            await call.answer(text=f"–î–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞—è–≤–∫–∏" –æ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# –≤—ã–≤–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –º–æ–∂–µ—Ç –≤–∑—è—Ç—å
@router_volunteer.message(F.text == "–°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def free_tasks(message: types.Message):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "volunteer" and exist[6] == 1:
        list_tasks = await db.get_list_tasks("create")

        if list_tasks:
            for item in list_tasks:
                user_adr = await db.get_user_adr(item[3])
                user_name = await db.get_user_name(item[3])
                kb_item = [
                    types.InlineKeyboardButton(text="–í–∑—è—Ç—å",
                                               callback_data=CbDataFreeTask(action='add',
                                                                            task_id=item[0],
                                                                            user_id=str(item[3]),
                                                                            user_perform=str(message.from_user.id),
                                                                            task=str(item[1])).pack()
                                               ),
                ]
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[kb_item])
                await message.answer(text=f"‚ÜòÔ∏è ‚Ññ {item[0]}. –ó–∞–¥–∞—á–∞: {item[1]}\n"
                                     f"üìã–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {item[2]}\n"
                                     f"‚è≥–°—Ä–æ—á–Ω–æ—Å—Ç—å: {values_bot.URGENCY_TASK[f'{item[5]}']}\n"
                                     f"üåç–ê–¥—Ä–µ—Å: {user_adr[0]}\n"
                                     f"üõèÔ∏è–ó–∞–∫–∞–∑—á–∏–∫: {user_name[0]}\n"
                                     f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {item[6]}\n",
                                     reply_markup=keyboard
                                     )
        else:
            await message.answer("–ó–∞–¥–∞—á –Ω–µ—Ç")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º , –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ—Ç—É, —á—Ç–æ –µ–≥–æ –∑–∞–¥–∞—á–∞ –≤—ã–±—Ä–∞–Ω–∞.
@router_volunteer.callback_query(CbDataFreeTask.filter())
async def button_press_free_task(call: types.CallbackQuery, callback_data: dict):
    action = callback_data.action
    task_id = callback_data.task_id
    task = callback_data.task
    user_id = callback_data.user_id
    user_perform = callback_data.user_perform
    if action == "add":
        state = await db.get_task_state(task_id=task_id)
        if state is not None and state[0]:
            await db.upd_add_task_volunteer(task_id, user_perform)
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            await call.answer(text=f"–ó–∞–¥–∞—á–∞ ‚Ññ {task_id} - {task} –¥–æ–±–∞–≤–ª–µ–Ω–∞", show_alert=True)
            await call.bot.send_message(user_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ {task_id} - {task} –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º!")
        else:
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            await call.answer(text=f"–î–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)