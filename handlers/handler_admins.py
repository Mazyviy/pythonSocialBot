from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.filters.callback_data import CallbackData
from database import db
from keyboards import keyboards as kb
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states.states_admin import ClassStateStatistics, ClassStateTaskClose
from config import values_bot
from datetime import datetime

router_admin = Router()

class CbDataRegestration(CallbackData, prefix="id1158"):
    action: str
    user_id: str
    user_role: str

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
# –±–æ—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–µ
# –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
@router_admin.message(F.text == "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def a_task_registration(message:types.Message):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        results = await db.get_applications_for_registration()
        if results:
            for item in results:
                kb_item = [
                    types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",callback_data=CbDataRegestration(action='add',
                                                                                                 user_id=str(item[3]),
                                                                                                 user_role=item[1]).pack()),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",callback_data=CbDataRegestration(action='del',
                                                                                                   user_id=str(item[3]),
                                                                                                   user_role=item[1]).pack())
                ]
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[kb_item])
                await message.answer(text=f"‚ÜòÔ∏è ‚Ññ: {item[0]}. –†–æ–ª—å: {values_bot.USER_ROLE_ICON[item[1]]} {values_bot.USER_ROLE[item[1]]}\n"
                                          f"üé´–§–ò–û: {item[2]} ({item[3]})\n"
                                          f"üìû–ù–æ–º–µ—Ä: {item[4]}\n"
                                          f"üåé–ê–¥—Ä–µ—Å: {item[5]}",
                                     reply_markup=keyboard)
        else:
            await message.answer("–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–µ—Ç")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫-–∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ - "add" (–¥–æ–±–∞–≤–∏—Ç—å), —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä—è–µ—Ç—Å—è, –∏ –µ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
# –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ - "del" (—É–¥–∞–ª–∏—Ç—å), —Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è, –∏ –µ–º—É —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
@router_admin.callback_query(CbDataRegestration.filter())
async def button_press_registration(call: types.CallbackQuery, callback_data: dict):
    action = callback_data.action
    user_id = callback_data.user_id
    user_role = callback_data.user_role

    if action == "add":
        await db.upd_user_status(status=1, user_id=user_id)
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(user_id, text="""–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞\n–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é <a>/menu</a>""")
    elif action == "del":
        await db.del_user(user_id)
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(user_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç.
@router_admin.message(F.text == "–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤")
async def a_list_v(message:types.Message):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        list_users = await db.get_list_users("volunteer",1) #user_id, user_role,user_name, user_number, id
        if list_users:
            array_text = ''
            for item in list_users:
                array_text_item = f"üèÉüèª ‚Ññ {item[4]} - {item[2]} (—Ç. {item[3]})\n"
                if len(array_text) + len(array_text_item) < 4096:
                    array_text += array_text_item
                else:
                    await message.answer(array_text)
                    array_text = ""
            if array_text:
                await message.answer(array_text)
        else:
            await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç.
@router_admin.message(F.text == "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def a_list_a(message:types.Message):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        list_users = await db.get_list_users(user_role="admin", user_status=1)
        if list_users:
            array_text = ''
            for item in list_users:
                array_text_item = f"üëë ‚Ññ {item[4]} - {item[2]} (—Ç. {item[3]})\n"
                if len(array_text) + len(array_text_item) < 4096:
                    array_text += array_text_item
                else:
                    await message.answer(array_text)
                    array_text = ""
            if array_text:
                await message.answer(array_text)
        else:
            await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç.
@router_admin.message(F.text == "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def a_list_c(message:types.Message):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        list_users = await db.get_list_users(user_role="client",user_status=1)
        if list_users:
            array_text = ''
            for item in list_users:
                array_text_item = f"üõèÔ∏è ‚Ññ {item[4]} - {item[2]} (—Ç. {item[3]})\n"
                if len(array_text) + len(array_text_item) < 4096:
                    array_text += array_text_item
                else:
                    await message.answer(array_text)
                    array_text = ""
            if array_text:
                await message.answer(array_text)
        else:
            await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–¥–∞—á" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç.
@router_admin.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–¥–∞—á")
async def a_list_free_task(message:types.Message):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        list_tasks = await db.get_list_tasks("create")
        if list_tasks:
            array_text=""
            for item in list_tasks:
                user_adr = await db.get_user_adr(item[3])
                user_name = await db.get_user_name(item[3])
                array_text_item = (f"‚ÜòÔ∏è ‚Ññ: {str(item[0])}. –ó–∞–¥–∞—á–∞: {item[1]}\n"
                                   f"üìã–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {item[2]}\n"
                                   f"üåç–ê–¥—Ä–µ—Å: {user_adr[0]}\n"
                                   f"‚è≥–°—Ä–æ—á–Ω–æ—Å—Ç—å: {values_bot.URGENCY_TASK[item[5]]}\n"
                                   f"üõèÔ∏è–ö–ª–∏–µ–Ω—Ç: {user_name[0]} ({item[3]})\n"
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {item[6]}\n\n")
                if len(array_text) + len(array_text_item) < 4096:
                    array_text += array_text_item
                else:
                    await message.answer(array_text)
                    array_text = ""
            if array_text:
                await message.answer(array_text)
        else:
            await message.answer("–ó–∞–¥–∞—á –Ω–µ—Ç")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç.
@router_admin.message(F.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ")
async def a_worked_task(message:types.Message):
   exist = await db.get_user_existence_in_db(message.from_user.id)
   if exist is not None and exist[5] == "admin" and exist[6] == 1:
        list_tasks = await db.get_list_tasks("work")
        if list_tasks:
            array_text = ""
            for item in list_tasks:
                user_adr = await db.get_user_adr(item[3])
                user_name_c = await db.get_user_name(item[3])
                user_name_v = await db.get_user_name(item[4])
                array_text_item =(f"‚ÜòÔ∏è ‚Ññ: {str(item[0])}. –ó–∞–¥–∞—á–∞: {item[1]}\n"
                                  f"üìã–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {item[2]}\n"
                                  f"üåç–ê–¥—Ä–µ—Å: {user_adr[0]}\n"
                                  f"‚è≥–°—Ä–æ—á–Ω–æ—Å—Ç—å: {values_bot.URGENCY_TASK[item[5]]}\n"
                                  f"üõèÔ∏è–ö–ª–∏–µ–Ω—Ç: {user_name_c[0]} ({item[3]})\n"
                                  f"üèÉ–í—ã–ø–æ–ª–Ω—è–µ—Ç: {user_name_v[0]} ({item[4]})\n"
                                  f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {item[6]}\n"
                                  f"–í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: {item[7]}\n\n")
                if len(array_text) + len(array_text_item) < 4096:
                    array_text += array_text_item
                else:
                    await message.answer(array_text)
                    array_text = ""
            if array_text:
                await message.answer(array_text)
        else:
            await message.answer("–ó–∞–¥–∞—á –Ω–µ—Ç")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç.
@router_admin.message(F.text == "–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
async def a_completed_task(message:types.Message, state: FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        await state.set_state(state=ClassStateTaskClose.submenu)
        await message.answer(text='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω', reply_markup=kb.keyboard_submenu_statistics_a())

@router_admin.message(F.text.in_({'–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è', '–∑–∞ –≥–æ–¥', '–∑–∞ –º–µ—Å—è—Ü', '–∑–∞ –¥–µ–Ω—å'}), ClassStateTaskClose.submenu)
async def a_completed_task_date(message:types.Message, state: FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        list_tasks = await db.get_list_tasks(state_task="close", date_value= message.text)
        if list_tasks:
            array_text = ""
            for item in list_tasks:
                user_adr = await db.get_user_adr(item[3])
                user_name_c = await db.get_user_name(item[3])
                user_name_v = await db.get_user_name(item[4])
                array_text_item = (f"‚ÜòÔ∏è ‚Ññ: {str(item[0])}. –ó–∞–¥–∞—á–∞: {item[1]}\n"
                                   f"üìã–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {item[2]}\n"
                                   f"üåç–ê–¥—Ä–µ—Å: {user_adr[0]}\n"
                                   f"‚è≥–°—Ä–æ—á–Ω–æ—Å—Ç—å: {values_bot.URGENCY_TASK[item[5]]}\n"
                                   f"üõèÔ∏è–ö–ª–∏–µ–Ω—Ç: {user_name_c[0]} ({item[3]})\n"
                                   f"üèÉ–í—ã–ø–æ–ª–Ω–∏–ª: {user_name_v[0]} ({item[4]})\n"
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {item[6]}\n"
                                   f"–í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: {item[7]}\n"
                                   f"–ó–∞–∫—Ä—ã—Ç–∞: {item[8]}\n\n")
                if len(array_text) + len(array_text_item) < 4096:
                    array_text += array_text_item
                else:
                    await message.answer(array_text)
                    array_text = ""
            if array_text:
                await message.answer(array_text)
        else:
            await message.answer("–ó–∞–¥–∞—á –Ω–µ—Ç")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –ø–æ–¥–º–µ–Ω—é.
@router_admin.message(F.text == "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def a_total_statistics(message:types.Message, state: FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        await state.set_state(state=ClassStateStatistics.submenu)
        await message.answer(text='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω', reply_markup=kb.keyboard_submenu_statistics_a())

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç.
@router_admin.message(F.text.in_({'–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è', '–∑–∞ –≥–æ–¥', '–∑–∞ –º–µ—Å—è—Ü', '–∑–∞ –¥–µ–Ω—å'}), ClassStateStatistics.submenu)
async def a_statistics(message:types.Message, state: FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        count_v = []
        count_b = []
        count_a = []
        count_close_task = []
        cur=''

        if message.text == '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è':
            count_v = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–≤–æ–ª–æ–Ω—Ç–µ—Ä")
            count_b = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–∑–∞–∫–∞–∑—á–∏–∫")
            count_a = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            count_close_task = await db.get_count_data(db_name="tasks",
                                                       column_name="state_task",
                                                       column_value="close")
            cur = message.text
            return await message.answer(f"<b>–∑–∞ {cur}</b>\n"
                                 f"–ö–æ–ª-–≤–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: {count_v[0]}\n"
                                 f"–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: {count_b[0]}\n"
                                 f"–ö–æ–ª-–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {count_a[0]}\n"
                                 f"–ö–æ–ª-–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: {count_close_task[0]}\n")

        elif message.text == '–∑–∞ –≥–æ–¥':
            count_v = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–≤–æ–ª–æ–Ω—Ç–µ—Ä",
                                              column_date='date_addition',
                                              date_value='year')
            count_b = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–∑–∞–∫–∞–∑—á–∏–∫",
                                              column_date='date_addition',
                                              date_value='year')
            count_a = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                              column_date='date_addition',
                                              date_value='year')
            count_close_task = await db.get_count_data(db_name="tasks",
                                                       column_name="state_task",
                                                       column_value="close",
                                                       column_date='date_task_create',
                                                       date_value='year')
            cur = datetime.now().year
            return await message.answer(f"<b>–∑–∞ {cur}</b>\n"
                                 f"–ö–æ–ª-–≤–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: {count_v[0]} (+{count_v[0] - count_v[1]})\n"
                                 f"–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: {count_b[0]} ({'{:+d}'.format(count_v[0] - count_v[1])})\n"
                                 f"–ö–æ–ª-–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {count_a[0]} ({'{:+d}'.format(count_a[0] - count_a[1])})\n"
                                 f"–ö–æ–ª-–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: {count_close_task[0]} ({'{:+d}'.format(count_close_task[0] - count_close_task[1])})\n")

        elif message.text == '–∑–∞ –º–µ—Å—è—Ü':
            count_v = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–≤–æ–ª–æ–Ω—Ç–µ—Ä",
                                              column_date='date_addition',
                                              date_value='month')
            count_b = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–∑–∞–∫–∞–∑—á–∏–∫",
                                              column_date='date_addition',
                                              date_value='month')
            count_a = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                              column_date='date_addition',
                                              date_value='month')
            count_close_task = await db.get_count_data(db_name="tasks",
                                                       column_name="state_task",
                                                       column_value="close",
                                                       column_date='date_task_create',
                                                       date_value='month')
            current_date = datetime.now()
            cur = current_date.strftime('%B')

            return await message.answer(f"<b>–∑–∞ {cur}</b>\n"
                                 f"–ö–æ–ª-–≤–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: {count_v[0]} (+{count_v[0] - count_v[1]})\n"
                                 f"–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: {count_b[0]} ({'{:+d}'.format(count_v[0] - count_v[1])})\n"
                                 f"–ö–æ–ª-–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {count_a[0]} ({'{:+d}'.format(count_a[0] - count_a[1])})\n"
                                 f"–ö–æ–ª-–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: {count_close_task[0]} ({'{:+d}'.format(count_close_task[0] - count_close_task[1])})\n")

        elif message.text == '–∑–∞ –¥–µ–Ω—å':
            count_v = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–≤–æ–ª–æ–Ω—Ç–µ—Ä",
                                              column_date='date_addition',
                                              date_value='day')
            count_b = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–∑–∞–∫–∞–∑—á–∏–∫",
                                              column_date='date_addition',
                                              date_value='day')
            count_a = await db.get_count_data(db_name="users",
                                              column_name="user_role",
                                              column_value="–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                              column_date='date_addition',
                                              date_value='day')
            count_close_task = await db.get_count_data(db_name="tasks",
                                                       column_name="state_task",
                                                       column_value="close",
                                                       column_date='date_task_create',
                                                       date_value='day')
            cur = "—Å–µ–≥–æ–¥–Ω—è"
            return await message.answer(f"<b>–∑–∞ {cur}</b>\n"
                                 f"–ö–æ–ª-–≤–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: {count_v[0]} (+{count_v[0] - count_v[1]})\n"
                                 f"–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: {count_b[0]} ({'{:+d}'.format(count_v[0] - count_v[1])})\n"
                                 f"–ö–æ–ª-–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {count_a[0]} ({'{:+d}'.format(count_a[0] - count_a[1])})\n"
                                 f"–ö–æ–ª-–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: {count_close_task[0]} ({'{:+d}'.format(count_close_task[0] - count_close_task[1])})\n")

@router_admin.message(F.text == '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def a_main_menu(message:types.Message, state: FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "admin" and exist[6] == 1:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.keyboard_menu_a())
        await state.clear()