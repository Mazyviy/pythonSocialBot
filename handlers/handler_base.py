from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message
from database import db
from keyboards import keyboards as kb
from handlers.handler_registration import get_menu_registration

router_base = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'start'
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# –∏–Ω–∞—á–µ –≤—ã–¥–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ä–æ–ª–∏ –º–µ–Ω—é
@router_base.message(Command('start'))
async def process_start_command(message: types.Message, state: FSMContext):
    bot_info = await message.bot.get_me()
    bot_name = bot_info.first_name
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.full_name} –≤ <b>{bot_name}</b>! ü§ù\n"
                         f"–ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –∏ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É. –ù–∞—á–Ω–µ–º! üí™\n"
                         f"–í–ù–ò–ú–ê–ù–ò–ï!!! –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!!!")
    result = await db.get_user_existence_in_db(message.from_user.id)
    if result is None:
        await get_menu_registration(message, state)
    elif result[6]==0:
        await message.answer(f"–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ {result[5]} {result[1]}\n"
                             "–ù–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–∞!")
    else:
        await get_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–∞–Ω–¥—ã 'menu'
# –≤—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –µ–º—É –º–µ–Ω—é
@router_base.message(Command('menu'))
async def get_menu(message: types.Message):
    results=await db.get_user_existence_in_db(user_id=message.from_user.id)
    if results[5] == "client" and results[6]==1:
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.keyboard_menu_c())
    elif results[5] == "volunteer" and results[6] == 1:
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.keyboard_menu_v())
    elif results[5] == "admin" and results[6] == 1:
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.keyboard_menu_a())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –µ–º—É –≤—ã–¥–∞–µ—Ç—Å—è –º–µ–Ω—é,
# –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
@router_base.message()
async def any_message(message:types.Message, state: FSMContext):
    result = await db.get_user_existence_in_db(message.from_user.id)
    if result is None or None in result:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        await get_menu_registration(message, state)
    else:
        if result[6] == 0:
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞!")
        elif result[6] == 1:
            await get_menu(message)