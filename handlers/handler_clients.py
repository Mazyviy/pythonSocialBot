from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from typing import Optional
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from keyboards import keyboards as kb
from states.states_client import ClassStateTaskProducts, ClassStateTaskMedicines, ClassStateTaxi, ClassStateDoctor
from handlers.handler_volunteers import CbDataCompletedTask
from config import values_bot

router_client = Router()

class CbDataDelTask(CallbackData, prefix="id2"):
    task_id: Optional[int] = None
    task: str
    action: str

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–ú–æ–∏ –∑–∞—è–≤–∫–∏" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞/–∑–∞–∫–∞–∑—á–∏–∫–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫.
@router_client.message(F.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def c_my_request(message: types.Message):
   exist=await db.get_user_existence_in_db(message.from_user.id)
   if exist is not None and exist[5] == "client" and exist[6] == 1:
        list_tasks = await db.get_list_tasks_client(message.from_user.id)
        if list_tasks:
            for item in list_tasks:
                kb_iteam = [
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CbDataDelTask(action='delete',
                                                                                      task_id=item[0],
                                                                                      task=item[1]).pack())
                ]
                keyboard=types.InlineKeyboardMarkup(inline_keyboard=[kb_iteam])

                if item[5]:
                    user_name = await db.get_user_name(item[5])
                    user_number = await db.get_user_nunmber(item[5])
                    await message.answer(f"‚ÜòÔ∏è ‚Ññ: {item[0]}. –ó–∞–¥–∞—á–∞: {item[1]}\n"
                                         f"üìã–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {item[2]}\n"
                                         f"‚è≥–°—Ä–æ—á–Ω–æ—Å—Ç—å: {values_bot.URGENCY_TASK[f'{item[3]}']}\n"
                                         f"üèÉüèª–í–æ–ª–æ–Ω—Ç–µ—Ä: {user_name[0]} (—Ç. {user_number[0]}\n"
                                         f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {item[4]}",
                                         reply_markup=keyboard)
                else:
                    await message.answer(f"‚ÜòÔ∏è ‚Ññ: {item[0]}. –ó–∞–¥–∞—á–∞: {item[1]}\n"
                                         f"üìã–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {item[2]}\n"
                                         f"‚è≥–°—Ä–æ—á–Ω–æ—Å—Ç—å: {values_bot.URGENCY_TASK[f'{item[3]}']}\n"
                                         f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {item[4]}",
                                         reply_markup=keyboard)
        else:
            await message.answer("–°–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—å–± –Ω–µ—Ç")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞.
# –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ, —Ç–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
@router_client.callback_query(CbDataDelTask.filter())
async def button_del_task(call: types.CallbackQuery, callback_data: dict):
    action = callback_data.action
    task_id = callback_data.task_id
    task = callback_data.task

    if action == "delete":
        result_db = await db.get_task_is_work(task_id=task_id)
        state_task =result_db[0]
        user_perform = result_db[1]
        if state_task == "work":
            await call.bot.send_message(chat_id=user_perform, text=f"–ó–∞–¥–∞—á–∞ ‚Ññ: {task_id} - {task}, —É–¥–∞–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º!")

        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await db.del_task(task_id)
        await call.answer(text=f"–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–¥–∞—á—É {task} ", show_alert=True)

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞/–∑–∞–∫–∞–∑—á–∏–∫–∞
@router_client.message(F.text == values_bot.TASK['doctor'])
async def c_doctor(message: types.Message, state: FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "client" and exist[6] == 1:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å –≤–∞–º–∏ —Å–ª—É—á–∏–ª–æ—Å—å –∏–ª–∏ –Ω–∞ —á—Ç–æ –∂–∞–ª—É–µ—Ç–µ—Å—å", reply_markup=kb.keyboard_cancel())
        await state.set_state(ClassStateDoctor.health_complaint)

# –ø—Ä–æ—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–±–µ—Ä–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
@router_client.message(ClassStateDoctor.health_complaint)
async def c_urgency_doctor(message: types.Message, state:FSMContext):
    answer = message.text
    await state.update_data(health_complaint=answer)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏", reply_markup=kb.keyboard_urgency_task())
    await state.set_state(ClassStateDoctor.task_urgency_doctor)

# –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É
@router_client.message(ClassStateDoctor.task_urgency_doctor)
async def c_set_doctro(message: types.Message, state:FSMContext):
    await state.update_data(task_urgency_doctor=values_bot.URGENCY_TASK_R[f'{message.text}'])
    data = await state.get_data()
    health_complaint = data.get('health_complaint')
    task_urgency_doctor = data.get('task_urgency_doctor')
    await db.add_task(task="–í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞",
                      task_detail=health_complaint,
                      state_task="create",
                      task_urgency=task_urgency_doctor,
                      user_id=message.from_user.id)
    await state.clear()
    await message.answer(text="–í–∞—à–µ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", reply_markup=kb.keyboard_menu_c())

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞/–∑–∞–∫–∞–∑—á–∏–∫–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# –ø—Ä–æ—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@router_client.message(F.text == values_bot.TASK['products'])
async def c_buy_products(message: types.Message, state: FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "client" and exist[6] == 1:
        await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", reply_markup=kb.keyboard_cancel())
        await state.set_state(ClassStateTaskProducts.list_products)

# –ø—Ä–æ—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–±–µ—Ä–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
@router_client.message(ClassStateTaskProducts.list_products)
async def c_urgency_products(message: types.Message, state:FSMContext):
    answer = message.text
    await state.update_data(list_products=answer)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏", reply_markup=kb.keyboard_urgency_task())
    await state.set_state(ClassStateTaskProducts.task_urgency_products)

# –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É
@router_client.message(ClassStateTaskProducts.task_urgency_products)
async def c_set_list_products(message: types.Message, state:FSMContext):
    await state.update_data(task_urgency_products=values_bot.URGENCY_TASK_R[f'{message.text}'])
    data = await state.get_data()
    list_products = data.get('list_products')
    task_urgency_products = data.get('task_urgency_products')
    await db.add_task(task="–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
                      task_detail=list_products,
                      state_task="create",
                      task_urgency=task_urgency_products,
                      user_id=message.from_user.id)
    await state.clear()
    await message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", reply_markup=kb.keyboard_menu_c())

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–ö—É–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞/–∑–∞–∫–∞–∑—á–∏–∫–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# –ø—Ä–æ—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
@router_client.message(F.text == values_bot.TASK['medicines'])
async def c_buy_medicines(message: types.Message, state:FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "client" and exist[6] == 1:
        await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤", reply_markup=kb.keyboard_cancel())
        await state.set_state(ClassStateTaskMedicines.list_medicines)

# –ø—Ä–æ—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–±–µ—Ä–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
@router_client.message(ClassStateTaskMedicines.list_medicines)
async def c_set_list_products(message: types.Message, state:FSMContext):
    await state.update_data(list_medicines=message.text)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏", reply_markup=kb.keyboard_urgency_task())
    await state.set_state(ClassStateTaskMedicines.task_urgency_medicines)

# –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É
@router_client.message(ClassStateTaskMedicines.task_urgency_medicines)
async def c_set_list_products(message: types.Message, state:FSMContext):
    await state.update_data(task_urgency_medicines=values_bot.URGENCY_TASK_R[f'{message.text}'])
    data = await state.get_data()
    list_medicines = data.get('list_medicines')
    task_urgency_medicines = data.get('task_urgency_medicines')
    await db.add_task(task="–ö—É–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞",
                      task_detail=list_medicines,
                      state_task="create",
                      task_urgency=task_urgency_medicines,
                      user_id=message.from_user.id)
    await state.clear()
    await message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞",reply_markup=kb.keyboard_menu_c())

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ç–∞–∫—Å–∏" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞/–∑–∞–∫–∞–∑—á–∏–∫–∞,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç,
# –ø—Ä–æ—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router_client.message(F.text == values_bot.TASK['taxi'])
async def c_taxi(message: types.Message, state: FSMContext):
    exist = await db.get_user_existence_in_db(message.from_user.id)
    if exist is not None and exist[5] == "client" and exist[6] == 1:
        await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–æ—Ä–æ–¥ —É–ª–∏—Ü–∞ –¥–æ–º)",reply_markup=kb.keyboard_cancel())
        await state.set_state(ClassStateTaxi.first_adress_taxi)

# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ good –ø—Ä–æ—Å–∏—Ç
# –≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å, –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑
@router_client.message(lambda message: message.content_type == types.ContentType.TEXT, ClassStateTaxi.first_adress_taxi)
async def c_taxi_first_adress(message: types.Message, state=FSMContext):
    await state.update_data(first_adress_taxi=message.text)
    await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥ —É–ª–∏—Ü–∞ –¥–æ–º)",reply_markup=kb.keyboard_cancel())
    await state.set_state(ClassStateTaxi.second_adress_taxi)

# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ good
# –ø—Ä–æ—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–±–µ—Ä–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏, –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å—Å –µ—â–µ —Ä–∞–∑
@router_client.message(lambda message: message.content_type == types.ContentType.TEXT, ClassStateTaxi.second_adress_taxi)
async def c_taxi_second_adress(message: types.Message, state=FSMContext):
    await state.update_data(second_adress_taxi=message.text)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏", reply_markup=kb.keyboard_urgency_task())
    await state.set_state(ClassStateTaxi.task_urgency_taxi)

# –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É
@router_client.message(ClassStateTaxi.task_urgency_taxi)
async def c_taxi_finish(message: types.Message, state=FSMContext):
    await state.update_data(task_urgency_taxi=values_bot.URGENCY_TASK_R[f'{message.text}'])
    data = await state.get_data()
    first_adress = data.get('first_adress_taxi')
    second_adress = data.get('second_adress_taxi')
    task_urgency_taxi = data.get('task_urgency_taxi')
    adress = f"–¢–∞–∫—Å–∏ –æ—Ç ({first_adress}) –¥–æ ({second_adress})"
    await db.add_task(task="–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ç–∞–∫—Å–∏",
                      task_detail=adress,
                      state_task="create",
                      task_urgency=task_urgency_taxi,
                      user_id=message.from_user.id)
    await message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", reply_markup=kb.keyboard_menu_c())
    await state.clear()

# –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞—è–≤–∫—É
@router_client.callback_query(CbDataCompletedTask.filter())
async def c_task_assurance(call: types.CallbackQuery, callback_data: dict):
    answer = callback_data.answer
    id = callback_data.id
    user_perform = callback_data.user_perform
    task = await db.get_task_id(id)

    if answer == "yes":
        await db.upd_state_task(task_id=id,column_name="date_task_close", state_task="close")
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(user_perform, text=f"ü•≥ –í—ã –º–æ–ª–æ–¥–µ—Ü. –ó–∞–¥–∞—á–∞ ‚Ññ {id} - {task[0]} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    elif answer == "no":
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(user_perform, text=f"üôÅ –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É ‚Ññ {id} - {task[0]}")

@router_client.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é",reply_markup=kb.keyboard_menu_c())